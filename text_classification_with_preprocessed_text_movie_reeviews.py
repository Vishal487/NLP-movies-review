# -*- coding: utf-8 -*-
"""Text Classification with preprocessed text: Movie reeviews.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vVO1LIybKaIEINyytSJjzBpKIrVG9er8

This notebook classifies movie reviews as positive or negative using the text of the review. This is an example of binary—or two-class—classification, an important and widely applicable kind of machine learning problem.

We'll use the IMDB dataset that contains the text of 50,000 movie reviews from the Internet Movie Database. These are split into 25,000 reviews for training and 25,000 reviews for testing. The training and testing sets are balanced, meaning they contain an equal number of positive and negative reviews.

Refer:- https://www.tensorflow.org/tutorials/keras/text_classification
"""

!pip install -q tf-nightly
import tensorflow as tf

from tensorflow import keras

import tensorflow_datasets as tfds

import numpy as np

print(tf.__version__)

"""## Download the IMDB  dataset"""

(train_data, test_data), info = tfds.load(
    # use the version pre-encode with an ~8k vocabulary
    'imdb_reviews/subwords8k',
    # return the train/test dataset as a tuple,
    split = (tfds.Split.TRAIN, tfds.Split.TEST),
    # return (example, label) pairs from the dataset (instead of a dictionary)
    as_supervised = True,
    # also return the 'info' structure
    with_info=True
)

"""## Try the encoder
The dataset info includes the text encoder (a https://www.tensorflow.org/datasets/api_docs/python/tfds/features/text/SubwordTextEncoder).
"""

encoder = info.features['text'].encoder

print('vocavulary size: {}'.format(encoder.vocab_size))

sample_string = 'Hello TensorFlow.'

encoded_string = encoder.encode(sample_string)
print('Encoded string is {}'.format(encoded_string))

original_string = encoder.decode(encoded_string)
print('The original string is "{}"'.format(original_string))

assert original_string == sample_string

"""The encoder encodes the string by breaking it into subwords or characters if the word is not in its dictionary. So the more a string resembles the dataset, the shorter the encoded representation will be."""

for ts in encoded_string:
    print('{} -----> {}'.format(ts, encoder.decode([ts])))

"""## Explore the data
Let's take a moment to understand the format of the data. The dataset comes preprocessed: each example is an array of integers representing the words of the movie review.

The text of reviews have been converted to integers, where each integer represents a specific word-piece in the dictionary.

Each label is an integer value of either 0 or 1, where 0 is a negative review, and 1 is a positive review.

Here's what the first 2 review looks like:
"""

for train_example, train_label in train_data.take(2):
    print('Encoded text: ', train_example[:10].numpy())
    print('Label: ',train_label.numpy())
    print('Actual text: ',encoder.decode(train_example[:10]))

"""## Prepare the data for training

We want to create batches of training data for our model. **The reviews are all different lengths**, so using `padded_batch` to zero pad the sequences while batching:
"""

BUUFFER_SIZE = 1000

train_batches = (
    train_data.shuffle(BUUFFER_SIZE).padded_batch(32, padded_shapes=([None],[]))
)

test_batches = (
    test_data.padded_batch(32, padded_shapes=([None],[]))
)

"""**Note:** As of TensorFlow 2.2 the `padded_shapes` argument is no longer required. The default behavior is to pad all axes to the longest in the batch."""

# so recreate batches

train_batches = (
    train_data.shuffle(BUUFFER_SIZE).padded_batch(32)
)

test_batches = (
    test_data.padded_batch(32)
)

"""Each batch will have a shape of `(batch_size, sequence_length)` because the **padding is dynamic each batch will have a different length:**"""

# check the shape of batch

for example_batch, label_batch in train_batches.take(2):
    print('Batch shape: ', example_batch.shape)
    print('Label batch: ', label_batch.shape)

"""## Build the model
The neural network is created by stacking layers—this requires two main architectural decisions:

* How many **layers** to use in the model?
* How many **hidden units** to use for each layer?

In this example, the input data consists of an array of word-indices. The labels to predict are either 0 or 1. Let's build a **Continuous bag of words** style model for this problem:
"""

model = keras.Sequential([
                          keras.layers.Embedding(encoder.vocab_size, 16),
                          keras.layers.GlobalAveragePooling1D(),
                          keras.layers.Dense(1)
])

model.summary()

"""## Loss function and Optimizer"""

model.compile(optimizer='adam',
              loss=tf.losses.BinaryCrossentropy(from_logits=True),
              metrics=['accuracy'])

"""## Train the model"""

history = model.fit(train_batches,
                    epochs=10,
                    validation_data=test_batches,
                    valdation_steps=30)

"""## Evaluate the model"""

loss, acc = model.evaluate(test_batches)

print('Loss: ', loss)
print('Accuracy: ', acc)

"""## Create a graph of accuracy and loss over time

`model.fit()` returns a `History` object that contains a `dictionary` with everything that happened during time:
"""

history_dict = history.history
history_dict.keys()

import matplotlib.pyplot as plt

acc = history_dict['accuracy']
val_acc = history_dict['val_accuracy']
loss = history_dict['loss']
val_loss = history_dict['val_loss']

epochs = range(1, len(acc)+1)

plt.plot(epochs, loss, 'blue', label='Training loss')
plt.plot(epochs, val_loss, 'orange', label='Validation loss')
plt.title('Training and valdation loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()

plt.clf()    # clear figure

plt.plot(epochs, acc, 'blue', label='Training acc')
plt.plot(epochs, val_acc, 'orange', label='Validation acc')
plt.title('Training and validation accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

